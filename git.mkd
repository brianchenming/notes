# Git
Checking out a git repository from a remote to your local storage

    git clone https://github.com/brianchenming/profile.git
    git clone git@github.com:brianchenming/notes.git

This also works for local git repo

    git clone path/to/local/git/repo

# Setup remote git repo using ssh
ref: http://blog.opsb.co.uk/instant-remote-git-repository-using-ssh
Remote

    cd folder/to/repository.git
    git init --bare

Local

    cd folder/to/become/local/repository
    git init
    git remote add remote_name ssh://$username@remote.hostname/folder/to/repository.git
    git pull remote_name master

# Undo git add before commit

    git reset FILE_TO_UNDO


# Stash (discard) uncommit changes:

    git stash save "work in progress for foo feature"
    git stash apply   # apply the change later

# Work with remote repo

    git pull    # get remote changes, need commit local changes first
    git push    # push local changes to remote repo
    git push origin branchname

# Autostage existing files during commit

    git commit -a
    git commit -am 'commit mesg'

# Ignore .gitignore
git .gitignore

    # a comment - this is ignored
    *.a       # no .a files
    !lib.a    # but do track lib.a, even though you're ignoring .a files above
    /TODO     # only ignore the root TODO file, not subdir/TODO
    build/    # ignore all files in the build/ directory
    doc/*.txt # ignore doc/notes.txt, but not doc/server/arch.txt

# See what you've staged that will go into your next commit

    git diff --staged. 

# Git diff
It's important to note that git diff by itself doesn't show all changes made
since your last commit — only changes that are still unstaged.

Another useful thing you may want to do is to keep the file in your working tree
but remove it from your staging area. In other words, you may want to keep the
file on your hard drive but not have Git track it anymore. This is particularly
useful if you forgot to add something to your .gitignore file and accidentally
added it, like a large log file or a bunch of .a compiled files. To do this, use
the --cached option:

    $ git rm --cached readme.txt

You can pass files, directories, and file-glob patterns to the git rm command.
That means you can do things such as

    $ git rm log/\*.log

Note the backslash (\) in front of the \*. This is necessary because Git does its
own filename expansion in addition to your shell's filename expansion. This
command removes all files that have the .log extension in the log/ directory.

# git log

    git log -n          # show the last n commits. 
    git log -p          # shows the diff introduced in each commit
    git log --stat      # summarizing info
    git log --pretty    # beautify output

However, the time-limiting options such as --since and --until are very useful.
You can also filter the list to commits that match some search criteria. The
--author option allows you to filter on a specific author, and the --grep option
lets you search for keywords in the commit messages. (Note that if you want to
specify both author and grep options, you have to add --all-match or the command
will match commits with either.)

    $ git log --pretty=format:"%h - %an, %ar : %s"
    ca82a6d - Scott Chacon, 11 months ago : changed the version number
    085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code
    a11bef0 - Scott Chacon, 11 months ago : first commit
    Option	Description of Output
    %H	Commit hash
    %h	Abbreviated commit hash
    %T	Tree hash
    %t	Abbreviated tree hash
    %P	Parent hashes
    %p	Abbreviated parent hashes
    %an	Author name
    %ae	Author e-mail
    %ad	Author date (format respects the –date= option)
    %ar	Author date, relative
    %cn	Committer name
    %ce	Committer email
    %cd	Committer date
    %cr	Committer date, relative
    %s	Subject

The last really useful option to pass to git log as a filter is a path. If you
specify a directory or file name, you can limit the log output to commits that
introduced a change to those files. This is always the last option and is
generally preceded by double dashes (--) to separate the paths from the options.

    $ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
       --before="2008-11-01" --no-merges -- t/
    5610e3b - Fix testcase failure when extended attribute
    acd3b9e - Enhance hold_lock_file_for_{update,append}()
    f563754 - demonstrate breakage of detached checkout wi
    d1a43f2 - reset --hard/read-tree --reset -u: remove un
    51a94af - Fix "checkout --track -b newbranch" on detac
    b0ad11e - pull: allow "git pull origin $something:$cur

# Git pretty log
From http://coolshell.cn/articles/7755.html. 

    git log --pretty=oneline
    git log --pretty=format:"%h - %an, %ar : %s"
    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --

Create alias 

    git config --global alias.ll "log --pretty=oneline"
    git ll

    git config --global alias.pl "log --pretty=format:'%h - %an, %ar : %s'"
    git pl

    git config --global alias.gl "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --"
    git gl

# Set core edit

    git config core.editor vim

# Show changes of commit

    git show commit-hash-string
    git show --stat --oneline commit-hash-string
    git show --name-only commit-hash-string

# Use tag
From http://learn.github.com/p/tagging.html

    git tag
    git tag -a v1.4 -m 'version 1.4'
    git tag
    git show v1.4
    # Tag previous commit, when 9fceb02 is the commit's md5
    git tag -a v1.2 9fceb02
    # Share tags
    git push --tags

# Use diff to patch

    git diff --no-prefix 9fceb02 f4e270d > dest_dir/diff.patch
    cd dest && patch -p1 < diff.patch

# Git pull remote branch to new branch

	git checkout -b <new_branch> origin/<new_branch>

	git checkout -b newdesign origin/newdesign

# Use stash
http://ariejan.net/2008/04/23/git-using-the-stash/
Stash your current changes

	$ git stash save 
	Saved "WIP on master: e71813e..."

List current stashes.  Yes, you can have more than one!! The stash works like a
stack. Every time you save a new stash, it's put on top of the stack.

	$ git stash list
	stash@{0}: WIP on master: e71813e..."

Note the stash@{0} part? That's your stash ID, you'll need it to restore it
later on. Let's do that right now. The stash ID changes with every stash
you make. stash@{0} refers to the last stash you made.

Apply a stash

	$ git stash apply stash@{0}

You may notice the stash is still there after you have applied it. You can
drop it if you don't need it any more.

	$ git stash drop stash@{0}

If you want to wipe all your stashes away, run the 'clear' command:

	$ git stash clear

It may very well be that you don't use stashes that often. If you just want to
quickly stash your changes to restore them later, you can leave out the stash
ID.

	$ git stash
	...
	$ git stash pop

# view changes of a file

	$ git log -- filename
	$ git show SHA1 filename

Or

	$ git log -p filename

Example

	$git log -- videoserver.f
	commit 61ef08057a8d815a04a7816f04297d9ffc0e9f4f
	Author: brianchenming <brianchenming@gmail.com>
	Date:   Mon Aug 6 01:21:29 2012 -0400
		1, test videoserver.f; 2, fix a bug in format_and_mount.sh
	commit c38abe41a9bd7cce8225c5996546727c2229c361
	Author: Zhichao Li <zhicli@fsl.cs.sunysb.edu>
	Date:   Wed May 16 17:30:35 2012 -0400
		add files/dirs from cse595g3
	$git show 61ef08057a8d815a04a7816f04297d9ffc0e9f4f videoserver.f
	commit 61ef08057a8d815a04a7816f04297d9ffc0e9f4f
	Author: brianchenming <brianchenming@gmail.com>
	Date:   Mon Aug 6 01:21:29 2012 -0400
		1, test videoserver.f; 2, fix a bug in format_and_mount.sh
	diff --git a/traces/videoserver.f b/traces/videoserver.f
	index 451b27b..ade1f90 100644
	--- a/traces/videoserver.f
	+++ b/traces/videoserver.f
	@@ -33,34 +33,38 @@
	 # 10 seconds. Thus the write bandwidth will be set as $filesize/$repintval.
	 #
	-set $dir=/mnt/exp
	+

# git rebase
Forward-port local commits to the updated upstream head.  Assume the following
history exists and the current branch is "topic":

      A---B---C topic
     /
    D---E---F---G master

From this point, the result of either of the following
commands:

    git rebase master
    git rebase master topic

would be:

                  A'--B'--C' topic
                 /
    D---E---F---G master


# git reset
Reset current HEAD to the specified state

Undo add:

    $ edit                                     <1>
    $ git add frotz.c filfre.c
    $ mailx                                    <2>
    $ git reset                                <3>
    $ git pull git://info.example.com/ nitfol  <4>

Undo a commit and redo

    $ git commit ...
    $ git reset --soft HEAD^      <1>
    $ edit                        <2>
    $ git commit -a -c ORIG_HEAD  <3>


# git merge squash
http://sandofsky.com/blog/git-workflow.html
Imagine I create a feature branch and create a series of checkpoint commits
over the next hour:

    git checkout -b private_feature_branch
    touch file1.txt
    git add file1.txt
    git commit -am "WIP"

When I’m done, instead of a vanilla git merge, I’ll run:

    git checkout master
    git merge --squash private_feature_branch
    git commit -v

# git add, rename, remove remote repo

    $ git remote
    origin
    $ git remote add pb git://github.com/paulboone/ticgit.git
    $ git remote -v
    origin	git://github.com/schacon/ticgit.git
    pb	git://github.com/paulboone/ticgit.git

    $ git remote rename pb paul
    $ git remote
    origin
    paul

    $ git remote rm paul
    $ git remote
    origin


#git list all remote branches

    git branch -a

#git diff to include added files
http://stackoverflow.com/questions/855767/can-i-use-git-diff-on-untracked-files
Use a new version of git, which supports `git add -N`

    git add -N newfile
    git diff

# Compare the changes, and diff

    git diff previous-commit last-commit interesting_files

# Add Git version number

    git tag v1.0
    git describe —always

# Permanently remove files
Remove files permanently between commits from 8c2b5c2 .

	git filter-branch --tree-filter 'rm -f results/web_server/webserver-8g-*/out/*.out' 8c2b5c2..HEAD

# submodule
Add

    git submodule add git://github.com/chneukirchen/rack.git rack

Clone

    git submodule init
    git submodule update

# git compare files in two branches

    git diff mybranch master -- myfile.cs

# ignore untraced files when status

	git status -uno

# checkout file or directory from another branch
Therefore, to update the working tree with files or directories from another
branch, you can use the branch name pointer in the git checkout command.

	git checkout <branch_name> -- <paths>

# update git on CentOS
https://answers.atlassian.com/questions/52498/stash-requires-git-1-7-6-but-rhel6-comes-with-git-1-7-1

    yum -y install zlib-devel openssl-devel cpio expat-devel gettext-devel gcc perl-ExtUtils-MakeMaker
    cd /usr/local/src
    wget http://git-core.googlecode.com/files/git-1.8.1.2.tar.gz
    tar xzvf git-1.8.1.2.tar.gz
    cd git-1.8.1.2
    ./configure
    make
    make install

# check whitespace

    $ git diff --check

# push local branch A to remote branch B
Current on local branch A.

    $ git fetch origin
    $ git merge origin/B
    $ git push origin A:B

# always work on the HEAD for contributing open source project
For example, if you want to submit a second topic of work to the project,
don't continue working on the topic branch you just pushed up — start over from
the main repository's master branch:

    $ git checkout -b featureB origin/master

or 

    $ git checkout -b smallfix origin/next

Then 

    $ (work)
    $ git commit
    $ git push myfork featureB

# pull request
Fork first:

    $ git remote add myfork url
    $ git push myfork featureA

Generate pull request:

    $ git request-pull origin/master myfork

# rebase on top of origin/master
Let's say the project maintainer has pulled in a bunch of other patches and
tried your first branch, but it no longer cleanly merges. In this case, you can
try to rebase that branch on top of origin/master, resolve the conflicts for
the maintainer, and then resubmit your changes:

    $ git checkout featureA
    $ git rebase origin/master
    $ git push -f myfork featureA

Because you rebased the branch, you have to specify the -f to your push
command in order to be able to replace the featureA branch on the server
with a commit that isn’t a descendant of it.

# find people that have touched a file

    $ git blame -- filepath
