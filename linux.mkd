# Bash
The ex command *:g/re/p* (grep) was the way they documented how to "globally"
"print" lines containing a "regular expression" (re). 

*:... g* is a prefix for "globally" applying a subsequent command to all lines
which match a pattern (regular expression) while *:... v* applies such a command
too all lines which do NOT match the given pattern ("v" from "conVerse").

Get machine type: arch; uname -a

Subshell hack:

    $ cmd0 | ( cmd1;cmd2;cmd3) | cmd4
    $ echo -e "Beijing Shanghai\n HongKong Chongqing" | ( while read wa wb; do echo "$wa to $wb"; done )
    Beijing to Shanghai
    HongKong to Chongqing

script and scriptreplay: record terminal sessions.

    $ script -t 2> timing.log -a output.session
    type commands;
    ...
    ...
    exit
    $ scriptreplay timing.log output.session

Bash process password

    #!/bin/sh
    #Filename: password.sh
    echo -e "Enter password: "
    stty -echo
    read password
    stty echo
    echo
    echo Password read.

Bash arrays

    $ array_var=(1 2 3 4 5 6)
    $ echo ${array_var[0]}
    $ echo ${array_var[*]}

    $ declare -A ass_array
    $ ass_array=([index1]=val1 [index2]=val2)

    $ declare -A fruits_value
    $ fruits_value=([apple]='100dollars' [orange]='150 dollars')
    $ echo "Apple costs ${fruits_value[apple]}"
    Apple costs 100 dollars

    $ declare -a MYRA
    $ MYRA=($(ls -ld DIR))

find: 

    $ find . \( -name "*.txt" -o -name "*.pdf" \) -print
    ./text.pdf
    ./new.txt
    $ find /home/users -path "*slynux*" -print
    /home/users/list/slynux.txt
    /home/users/slynux/eg.css
    $ find . -iregex ".*\(\.py\|\.sh\)$"
    ./test.py
    ./new.PY
    $ find . ! -name "*.txt" -print
    .
    ./next.jpg
    ./test.py
    ./new.PY
    $ find . -type f -user root -exec chown slynux {} \;
    $ find devel/source_path \( -name ".git" -prune \) -o \( -type f -print \)

xargs:

    $ cat cecho.sh
    #!/bin/bash -
    echo "$@ #"
    $ echo "arg1 arg2 arg3" | xargs -n 2 ./cecho.sh
    arg1 arg2 #
    arg3 #
    $ echo -e "arg1\n arg2\n arg3\n" | xargs -I {} ./cecho.sh -p {} -l
    -p arg1 -l #
    -p arg2 -l #
    -p arg3 -l #

Hence we must use -print0 along with find to produce an output with delimited
character null ('\0') whenever we use the find output as the xargs input.

    $ find . -type f -name "*.txt" -print0 | xargs -0 rm -f
    
*tput* and *stty* are utilities that can be used for terminal manipulations.

    tput sc     store the cursor position
    tput rc     restore cursor position
    tput ed     clear rest of current line

    {1..6} {a..z}
    `#!/bin/bash â€“xv`
    `:(){ :|:& };:`

A function can be exported like environment variables using export export -f fname
While using string comparison, it is best to use double square brackets since use of single
brackets can sometimes lead to errors. `[[ $str1 = $str2 ]]`

# Ubuntu
Ubuntu, hold down the alt key and click and drag anywhere in the window to move
it so that all the buttons are visible

# Thinkpad trackpoint settings:

    # echo "255" > /sys/devices/platform/i8042/serio1/sensitivity 
    # echo "250" > /sys/devices/platform/i8042/serio1/speed

# sgid
The sgid permission for directory means that files created in it the directory
will inherit its group affiliation from the directory, rather than inheriting
it from user.

# inspect hardware

    dmidecode        # get Machine info 
    lsb_release -a   # get Linux distribution info
    hal
    hdparm           # get disks

# make sync clock
> Sometimes when i execute make command, i am getting Clock Skew detected error
> (your build may be incomplete).

This is a classic problem with VMs: it's hard to get an accurate clock when
it's virtual. If this happens, run the following command from time to time:

    /sbin/service ntpd restart

# shutdown server
Use -h option, which requests that the system be either halted or powered off
after it has been brought down, with the  choice  as to which left up to the
system.

    shutdown -h now 

# CentOS Compile New Kernel 
When compile new kernel from old version of CentOS, it is possible that the new
kernel complains about no hard drives found. To solve this, enable the
following two options in kernel config:

    CONFIG_SYSFS_DEPRECATED=y
    CONFIG_SYSFS_DEPRECATED_V2=y

# Ubuntu compile new kernel
After make menuconfig, make, make modules_install, and make install, also
update initramfs using

    $sudo update-initramfs -c -k 3.4.7 # substitute 3.4.7 with your version

# Find network card information

    #lspci | grep -i eth
    02:05.0 Ethernet controller: Intel Corporation 82546EB Gigabit Ethernet
    Controller (Copper) (rev 01)
    02:05.1 Ethernet controller: Intel Corporation 82546EB Gigabit Ethernet
    Controller (Copper) (rev 01)
    03:07.0 Ethernet controller: Intel Corporation 82541GI Gigabit Ethernet
    Controller (rev 05)

# Cool linux tools
http://kkovacs.eu/cool-but-obscure-unix-tools
http://coolshell.cn/articles/7829.html

# Extract file script
git://github.com/lzap/dancepill.git

# Wajig
Wajig is a simplified wrapper to Debian's package management tools including
dpkg and APT. Wajig provides the functionality of apt-get, dpkg, dpkg-deb,
apt-cache and other tools. These tools launch as a subprocess. Wajig also
provides extra functionality beyond that of the stock apt and dpkg tools.  For
example, the command wajig sizes provides a listing of all installed packages
and the amount of disk space they require, from smallest to largest.

# View Linux distribution

	$ cat /etc/*-release
	$ lsb_release -a

# hdparm, get disk information

	$ hdparm -I


# logrotate
http://www.thegeekstuff.com/2010/07/logrotate-examples/

	/etc/logrotate.conf
	man logrotate

# mount debugfs 

  # mount -t debugfs none /sys/kernel/debug/

# Install development man pages

    $ sudo apt-cache search manpages
    $ sudo apt-get install manpages-dev
    $ sudo apt-get install manpages-posix

# dev_t
dev_t typedef as an unsigned bit-or of major and minor dev no.

    MAJORBITS
    MAJOR
    MINOR

# Disable terminal bell in bash and vim

    $ echo "set bell-style none" >> ~/.inputrc
    $ echo "set vb" >> ~/.vimrc

# Decompress bz2 file

    # bunzip2 file.bz2

# Block analysis

    blktrace
    blkparse
    btrecord
    btreplay

# Check if user is root

    if [[ $UID -ne 0 ]]; then
      echo "$0 must run as root"
      exit 1
    fi

# gid of grouped pipeline command

    $ echo -e '#!/bin/bash -\n sleep 120' > sleep-1.sh
    $ echo -e '#!/bin/bash -\n sleep 120' > sleep-2.sh
    $ chmod +x ./sleep-*.sh
    $ (./sleep-1.sh | ./sleep-2.sh) &
    [4]
    14794
    $ echo $!
    14794
    $ ps -ef | grep slee-
    mchen    14795 14794  0 17:49 pts/2    00:00:00 /bin/bash - ./sleep-1.sh
    mchen    14796 14794  0 17:49 pts/2    00:00:00 /bin/bash - ./sleep-2.sh
    mchen    14800 11348  0 17:49 pts/2    00:00:00 grep --color=auto sleep- 

# linux ACPI, CPU governor and frequency
Check available settings:

	$ cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors
	conservative ondemand userspace powersave performance
	$ cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies
	2661000 2660000 2527000 2394000 2261000 2128000 1995000 1862000 1729000 1596000

Set governor and frequency

	$ echo "conservative" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governors
	$ echo "2661000" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_frequencies

# Make, missing separator
As indicated in the online manual, the most common cause for that error is
that lines are indented with whitespaces when make expects tab characters.

    Correct
    target: 
    \tcmd
    where \t is TAB

    Wrong
    target:
        cmd

# reboot machine using BMC

    $ ipmitool -U root -H i-chevron8 chassis power reset

# Cannot find terminfo entry for 'xterm-256color'

    sudo apt-get install ncurses-term

# Find file of installation

    apt-get install apt-file
    apt-file search file_name

# Change default os after install ubuntu 12

    $sudo vim /etc/default/grub # change default index to the desired one
    $sudo update-grub2

#  Passing an argument through a Makefile

    $ cat Makefile
    OVERRIDING=default
    run:
            echo running with $(ARG) and $(OVERRIDING)
    $ make run
    echo running with  and default
    running with and default
    $ make run ARG=a
    echo running with a and default
    running with a and default
    $ make run ARG=a OVERRIDING="a little more"
    echo running with a and a little more
    running with a and a little more


# bash case fail through
Fail through of bash is only available after bash 4.0

    case a in 
    1) echo ;&
    2) echo ;;
    esac

# user and group

    $ groups  # view groups belongs to
    $ id      # view groups names and numeric values

# set printk level

    $ echo 7 > /proc/sys/kernel/printk

# Easy way to find UID and GID

    cd ~
    ls -ln

# Check linux distribution

    cat /etc/*release*

# Install autopilot

    yum install perl
    yum install perl-CPAN

# Get block size

    /sbin/dumpe2fs /dev/sda | grep 'Block size'

# Get block capacity

    blockdev --getsize /dev/sda
