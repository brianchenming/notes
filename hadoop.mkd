# hostname

    Use hostname in conf files. Hostname like `zw_139_171` is illegal, do not
    contain `_`. 

# HADOOP_CLASSPATH

    Use HADOOP_CLASSPATH in HADOOP_HOME/conf/hadoop-env.sh to add extra library

# Pig
see org.apache.pig.builtin.TOP
script.pig: 

    register /home/ime/chenming/pig/imeudf.jar;
    a = load '/ime/javier/dbg_sample_wrongdata/201105' using PigStorage(' '); 
    b = stream a through `gawk 'NF==9'` as (date, time, py:chararray, hz, exe,
            num, type:chararray, adj:chararray, err:int);
    c = filter b by err==-1;
    d = group c by hz; 
    e = foreach d generate group, COUNT(c), 
        com.sogou.imeresearch.udf.ImeDistinct(c.py);
    store e into '/ime/javier/testpig2';

ImeDistinct.java:

    package com.sogou.imeresearch.udf;
    import java.io.IOException;

    /**
     * Count distinct tuples in a bag.
     */
    public class ImeDistinct extends EvalFunc<DataBag> implements Algebraic {
        public static Long one = Long.valueOf(1);
        private static BagFactory bagFactory = BagFactory.getInstance();
        private static TupleFactory tupleFactory = TupleFactory.getInstance();
        /* (non-Javadoc)
         * @see org.apache.pig.EvalFunc#exec(org.apache.pig.data.Tuple)
         */
        @Override
        public DataBag exec(Tuple input) throws IOException {
            return getDistinct(input);
        }

        /* (non-Javadoc)
         * @see org.apache.pig.Algebraic#getFinal()
         */
        @Override
        public String getFinal() {
            return Final.class.getName();
        }

        /* (non-Javadoc)
         * @see org.apache.pig.Algebraic#getInitial()
         */
        @Override
        public String getInitial() {
            return Initial.class.getName();
        }

        /* (non-Javadoc)
         * @see org.apache.pig.Algebraic#getIntermed()
         */
        @Override
        public String getIntermed() {
            return Intermediate.class.getName();
        }

        static public class Initial extends EvalFunc<Tuple> {
            /* (non-Javadoc)
             * @see org.apache.pig.EvalFunc#exec(org.apache.pig.data.Tuple)
             */
            @Override
            public Tuple exec(Tuple input) throws IOException {
                // the input has  a single field which is a tuple
                // representing the data we want to distinct. 
                // unwrap, put in a bag and send down
                try {
                    DataBag outputBag = bagFactory.newDefaultBag();
                    DataBag inputBag = (DataBag) input.get(0);
                    
                    for (Tuple inTp : inputBag) {
                        Tuple outTp = tupleFactory.newTuple(2);
                        outTp.set(0, inTp.get(0));
                        outTp.set(1, one);
                        outputBag.add(outTp);
                    }
                    
                    return tupleFactory.newTuple(outputBag);
                } catch (ExecException e) {
                    throw e;
                }
            }
        }

        static public class Intermediate extends EvalFunc<Tuple> {
            /* (non-Javadoc)
             * @see org.apache.pig.EvalFunc#exec(org.apache.pig.data.Tuple)
             */
            @Override
            public Tuple exec(Tuple input) throws IOException {
                return tupleFactory.newTuple(countDistinct(input, this));
            }
        }

        static public class Final extends EvalFunc<DataBag> {
            /* (non-Javadoc)
             * @see org.apache.pig.EvalFunc#exec(org.apache.pig.data.Tuple)
             */
            @Override
            public DataBag exec(Tuple input) throws IOException {
                return countDistinct(input, this);
            }
        }
        
        static private DataBag createDataBag() {
            // by default, we create InternalSortedBag, unless user configures
            // explicitly to use old bag
            String bagType = null;
            if (PigMapReduce.sJobConfInternal.get() != null) {     
                bagType = PigMapReduce.sJobConfInternal.get().get(
                        "pig.cachedbag.distinct.type");       			
            }
                          
            if (bagType != null && bagType.equalsIgnoreCase("default")) {
                return BagFactory.getInstance().newDistinctBag();
            } else {   	    	
                return new InternalDistinctBag(3);
            }
        }
        
        static private DataBag countDistinct(Tuple input, EvalFunc evalFunc) 
                throws IOException {
            DataBag outputBag = createDataBag();
            long progressCounter = 0;
            Map<Object, Long> map = new HashMap<Object, Long>();
            DataBag inputBag = (DataBag)input.get(0);
            try {
                for (Tuple tuple : inputBag) {
                    for (Tuple t : (DataBag)tuple.get(0)) {
                        Object key = (Object)t.get(0);
                        Long val = (Long)t.get(1);
                        if (map.containsKey(key)) {
                            val += map.get(key);
                        }
                        map.put(key, val);
                        ++progressCounter;
                        if((progressCounter % 1000) == 0){
                            evalFunc.progress();
                        }
                    }
                }
                for (Object key : map.keySet()) {
                    Tuple tp = tupleFactory.newTuple(2);
                    tp.set(0, key);
                    tp.set(1, map.get(key));
                    outputBag.add(tp);
                }
            } catch (ExecException e) {
                throw e;
            }
            return outputBag;
        }

        protected DataBag getDistinct(Tuple input) throws IOException {
            try {
                DataBag inputBg = (DataBag)input.get(0);
                DataBag result = createDataBag();
                Map<Object, Long> map = new HashMap<Object, Long>();
                long progressCounter = 0;
                for (Tuple tuple : inputBg) {
                    Object key = (Object)tuple.get(0);
                    Long val = one;
                    if (map.containsKey(key)) {
                        val += map.get(key);
                    }
                    map.put(key, val);
                    ++progressCounter;
                    if ((progressCounter % 1000) == 0) {
                        progress();
                    }
                }
                for (Object key : map.keySet()) {
                    Tuple tp = tupleFactory.newTuple(2);
                    tp.set(0, key);
                    tp.set(1, map.get(key));
                    result.add(tp);
                }
                return result;
            } catch (ExecException e) {
                 throw e;
            }
        }
    }
