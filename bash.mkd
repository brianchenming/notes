# Keep eyes on pipeline

    weights=(1 2 3)     # global variable

    # cannot change global weights
    function setweights() { 
        local i=0 
        echo "$1" | tr ',' '\n' | while read type; do  
            weights[$i]="$type"; 
            echo "weights[$i]: ${weights[$i]}" 
            let ++i; 
        done 
    }

    # change global weights
    function setweights() { 
        tmp=`mktemp`
        echo "$1" | tr ',' '\n' > $tmp
        while read type; do 
            weights[$i]="$type";
            echo "${weights[$i]}"
            let ++i;
        done < $tmp
        rm -f $tmp
    }

# tty
tty is a Unix device file that handles input and output for your terminal, window, etc.

    % tty
    /dev/tty07

# create and delete temp file or dir

    TMPDIR=`mktemp -d`
    trap "rm -rf $TMPDIR" EXIT

# Bash substitute

    $ echo Chenming
    Chenming
    $ ^C^c
    echo chenming
    chenming
    $ echo Chenming
    Chenming
    $ ^C^c^ chenjun
    echo chenming chenjun
    chenming chenjun
    $ echo !:1:p
    echo chenming

# Make your terminal sane again

    $ stty sane

# Use the -n argument to bash to test syntax often

    $ bash -n myscript

# Bash getopts, parsing arguments and data

    while getopts 'W:ch' opt; do
        case "$opt" in
            W) setweights "$OPTARG" ;;
            c) run_classify=true; ;;
            ?) usage; exit 1; ;;
        esac
    done
    shift $(($OPTIND - 1))

    # leading ':' v---here to silence getopts.
    #   ':' argument missing
    #   '?' unknown option
    while getopts :W:ch opt; do
        case "$opt" in
            \:) echo "argument missing from -$OPTARG option"; exit 1; ;;
            \?) echo "unknown option: -$OPTARG"; exit 1; ;;
        esac
    done

    # parse output with a function call
    function lsparts ( )
    {
        PERMS=$1
        LCOUNT=$2
        OWNER=$3
        GROUP=$4
        SIZE=$5
        CRDATE=$6
        CRTIME=$7
        FILE=$8
    }
    lsparts $(ls -l "$1")

    # parse output with read
    ls -l "$1" | { read PERMS LCOUNT OWNER GROUP SIZE CRDATE CRTIME FILE ;
        echo $FILE has $LCOUNT 'link(s)' and is $SIZE bytes long. ;
    }

# Exit shell immediately if a simple command exits with a nonzero exit value.

    $ set -e    

# Change relative path to absolute path

    $ abpath=`readlink -m $1`

# expr command

    $ echo `expr 5 % 3`   # modulo
    2
    $ echo `expr 5 \> 3`  # logical operators
    1
    $ echo `expr 4 \<= 3` 
    0

    $ str="abcdef"        # string operators
    $ echo `expr length $str`       # strlen
    6
    $ echo `expr index $str bc`     # index of substr
    2
    $ echo `expr substr $str 2 2`   # substring
    bc
    $ echo ${str:1:2}
    bc
    $ echo `expr match 128m '[0-9]*'`

    #  The default behavior of the 'match' operations is to
    #+ search for the specified match at the BEGINNING of the string.
    #
    #       Using Regular Expressions ...
    b=`expr match "$a" '[0-9]*'`               #  Numerical count.
    echo Number of digits at the beginning of \"$a\" is $b.
    b=`expr match "$a" '\([0-9]*\)'`           #  Note that escaped parentheses
    #                   ==      ==             #+ trigger substring match.
    echo "The digits at the beginning of \"$a\" are \"$b\"."ck

The : (null) operator can substitute for match. For example, b=`expr $a :
[0-9]*` is the exact equivalent of b=`expr match $a [0-9]*` in the above
listing. `expr $string : '.*'` return the length of string.

# reverse a line

    $echo "nehc gnim" | rev

# Generate random string 

    < /dev/urandom tr -dc A-Za-z0-9_ | head -c 100000 > random.txt

# Show the dir of the running bash script

    DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Read directory contents into an array

    files=(*)

