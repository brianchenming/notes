# Vim

To define a funcref variable, use the following command:

    :let Myfuncrefvar = function("Myfunction")
    :echo Myfuncrefvar()

Notice that the variable name starts with a capital letter. This is because all
user-defined function names in Vim need to have a capital first letter in the
name, and hence all variables that can be executed as functions should have the
same restriction.

If you define a variable in Vim without specifying which scope it belongs to,
then it belongs to the global scope by default—unless it is defined in a
function, which causes it to only be available in the function itself. The
following eight scopes are available:

    v: Vim predefined global scope
    g: Global scope
    b: Buffer scope—only available in the buffer where it was defined
    t: Tab scope—only available in the Vim tab where it was defined
    w: Window scope—only available to the current Vim window (viewport)
    l: Function scope—local to the function it is defined in
    s: Sourced file scope—local to a Vim script loaded using :source
    a: Argument scope—used in arguments for functions

Convert vim screen to html `%:TOhtml`

    $ vi +/pattern file     # open and place cursor at pattern
    cH, dH, yH      # delete to top of screen 
    enter           # go to first char of next line
    2c), 2d), 2y)   # delete to second sentence following
    d/pattern       # delete to next pattern match
    ci"             # change content in "" 
    ci[             # change content in []
    ci(             # change content in ()
    :g/pattern      # find the last occurence of pattern
    :g!/pattern/nu  # find all lines not contain pattern and show line number
    ~               # pre pattern if just search /The, /~n will search /Then
    :%s/Foo/&, Bar  # same to :%s/Foo/Foo, Bar

# Python
autocompletion in python

    $python
    Python 2.6.5 (r265:79063, Apr 16 2010, 13:09:56) 
    [GCC 4.4.3] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import sys
    >>> import rlcompleter
    >>> import readline
    >>> readline.parse_and_bind("tab: complete")
    >>> sys.std
    sys.stderr  sys.stdin   sys.stdout  
    >>> 
