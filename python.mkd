# load mat data from matlab

	import scipy.io
	mat = scipy.io.loadmat('file.mat')

# Profile python scripts
`
python -m cProfile program.py params
`

# Get min value and index

    min_index, min_value = min(enumerate(values), key=operator.itemgetter(1))


# select nsmallest

    import heapq
    heapq.nsmallest(N, iterable)

# rsplit

    str.rsplit([sep[, maxsplit]])

Return a list of the words in the string, using sep as the delimiter string. If
maxsplit is given, at most maxsplit splits are done, the rightmost ones. If sep
is not specified or None, any whitespace string is a separator. Except for
splitting from the right, rsplit() behaves like split() which is described in
detail below.

# generator
A generator is a function that produces a sequence of results instead of a
single value.
http://www.dabeaz.com/generators/index.html

# os.walk()
From http://www.dabeaz.com/generators/index.html
A very useful function for searching the file system

    import os
    for path, dirlist, filelist in os.walk(topdir):
        # path : Current directory
        # dirlist : List of subdirectories
        # filelist : List of files

# ipython
Typing object_name? will print all sorts of details about any object, including
docstrings, function definition lines (for call arguments) and constructor
details for classes. 

    %pdoc, %pdef, %psource and %pfile

# update python pacakge

    sudo easy_install -U numpy

# install python package w/o root access
    1. Install python_setuptools
    http://pypi.python.org/pypi/setuptools

    wget http://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg#md5=fe1f997bc722265116870bc7919059ea
    sh setuptools-XXX.egg --prefix=/home/mchen/software

    2. Install package with easy_install

    $ easy_install --prefix=/home/mchen/software ipython

# debug within ipython

    import pdb
    pdb.run('statements')

# use magic in ipython

    %lsmagic
    %sx?

# calcuate length of iterable
http://stackoverflow.com/questions/3345785/getting-number-of-elements-in-an-iterator-in-python

	sum(1 for _ in iterable)

# use pythonbrew
Pythonbrew enable/disable:

	# To switch permanently,
	pythonbrew switch 2.7.2

	# To use temporarily,
	pythonbrew use 2.7.2

	# To jump back to system python, just turn off pythonbrew
	pythonbrew off

Install

	$ curl -kL http://xrl.us/pythonbrewinstall | bash
	$ [[ -s $HOME/.pythonbrew/etc/bashrc ]] && source $HOME/.pythonbrew/etc/bashrc
	$ pythonbrew list -k
	$ pythonbrew install 2.7.3
	$ pythonbrew use 2.7.3
	$ which python
	$ pythonbrew venv init	# install virtual environment
	$ pythonbrew venv create default # create new env
	$ pythonbrew venv use default	# use default env

	# Quitting a virtual environment to the return to the global environment
	$ deactivate

	# List all environment on your machine
	pythonbrew venv list

# workaround bz2 problem when install pandas

	$ easy_install --upgrade pytz

# install pip

	wget http://pypi.python.org/packages/source/p/pip/pip-1.2.1.tar.gz
	tar xzf pip-1.2.1.tar.gz
	cd pip-1.2.1
	python setup.py install

# tricks
http://www.quora.com/Python-programming-language-1/What-are-the-Python-features-you-wish-youd-known-earlier#ans2273223
## counter
Before:

	counter = dict()
	for item in items:
	    if item not in counter:
			counter[item] = 0
		counter[item] += 1

Now:

	from collections import Counter
	counter = Counter(items)

## Quick timer:

    import time

    class Timer:
        def __enter__(self):
            self.start = time.clock()
            return self

        def __exit__(self,*args):
            self.end = time.clock()
            self.interval = self.end-self.start

    with Timer() as t:
        dosomesuch()
    print t.interval

Or with decorator

    from contextlib import contextmanager
    import time
    import sys

    @contextmanager
    def timeit(msg):
        start = time.time()
        yield
        print >> sys.stderr, msg, 'took %0.3f secs' % (time.time() - start)

    with timeit('myfunc'):
        myfunc()

## shutil.copyfileobj

    from contextlib import closing
    from shutil import copyfileobj
    from urllib2 import urlopen

    with closing(urlopen(someurl)) as res, open('somefile', 'wb') as out:
        copyfileobj(res, out)

## None is less than any number

    >>> sorted([1, 2, None, 4.5, float('-inf')])
    [None, -inf, 1, 2, 4.5]

## use pdb to print stack trace

    def foo(bar):
        baz = bar + 2
        import pdb; pdb.set_trace()

## codecs.getwriter for automatic encoding

    import codecs
    import sys
    out = codecs.getwriter(sys.stdout, 'utf-8')
    print >> out, '陈明'

## logging for debugging

    import logging
    def set_logger(cls):
        log = logging.getLogger(LOGGER_NAME)
        log.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
        handler_stream = logging.StreamHandler()
        handler_stream.setFormatter(formatter)
        log.addHandler(handler_stream)

        handler_file = logging.FileHandler('errors.txt')
        handler_file.setFormatter(formatter)
        handler_file.setLevel(logging.WARNING)
        log.addHandler(handler_file)
