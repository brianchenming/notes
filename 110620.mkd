Linux
====
Useful commands:

    $ shopt -s extglob
    $ mkdir ~/.vim/{plugin,doc,syntax} -p
    $ help shopt    # set shell option
    $ arch          # view machine arch
    $ uname         # view system info
    $ hostname
    $ dd            # convert and format data
    $ od -An -j4 -N4 -t 4d  # view binary data
    $ hexdump -n 16 -s [byte_to_skip] -e '4/4 "%d\n"' bin
    $ help compgen  # complete, autocomplete bash, complete globbing

GDB, set exec-wrapper wrapper. When 'exec-wrapper' is set, the specified wrapper
is used to launch programs for debugging. gdb starts your program with a shell
command of the form exec wrapper program. Quoting is added to program and its
arguments, but not to wrapper, so you should add quotes if appropriate for your
shell. The wrapper runs until it executes your program, and then gdb takes
control.

You can use any program that eventually calls execve with its arguments as a
wrapper. Several standard Unix utilities do this, e.g. env and nohup. Any Unix
shell script ending with exec "$@" will also work.

For example, you can use env to pass an environment variable to the debugged
program, without setting the variable in your shell's environment:

    (gdb) set exec-wrapper env 'LD_PRELOAD=libtest.so'
    (gdb) run
    (gdb) where     # where
    (gdb) finish    # finish

SVN add external package dependency

    $ svn propedit svn:externals 

Program information, linker and loader

    $ ldd *.so
    $ nm *.obj
    $ ranlib archive
    $ ar archive
    /etc/ld.so.cache
    ldconfig

Vim
====
Vim windows

    $ vim -O file1 file2    # split window vertically
    $ vim -o file1 file2    # split window horizontally
    $ vimdiff -o file1 file2

    CTRL-W s    
    :sp
    CTRL-W v
    :vs
    CTRL-W n
    :new
    CTRL-W j    # move cursor to window below
    CTRL-W k    # move cursor to window above
    CTRL-W h    # move cursor to window left
    CTRL-W l    # move cursor to window right
    CTRL-W t    # move cursor to top-left window
    CTRL-W b    # move cursor to bottom-right window
    CTRL-W p    # go to previsou window
    CTRL-W o    # make current window the only one
    :hid        # quit current window
    :sv         # split and view (readonly)
    :sf {file}  # search for file in 'path' and split if found
    :h \_p      # any printable character including newline
    ;           # next f, F, t, T command
    ,           # next f, F, t, T command in opposite direction
    @:          # next command-mode command
    CTRL-a      # inc number
    CTRL-x      # dec number
    *,#         # find word under cursor
    ["x]S       # delete [into register x] and start insert, same to cc
    gD          # go to global definition
    C-d, C-t    # indent in insert mode, very useful
    C-w         # delete previous word in insert mode
