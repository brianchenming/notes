# set printk level

    echo 7 > /proc/sys/kernel/printk

# magic SysRq
enable it in kernel option:

    CONFIG_MAGIC_SYSRQ=y
    $cat /proc/sys/kernel/sysrq 
    1

see http://kernel.org/doc/Documentation/sysrq.txt.

# enable kdump

    yum install kexec-tools

Edit /etc/grub.cfg, and add "crashkernel=128M" or "crashkernel=128M@0"

    kernel /boot/vmlinuz-2.6.18-128.1.16.el5 ro root=LABEL=/ rhgb quiet crashkernel=128M

Check:

    service kdump status

# uncompressed vmlinux file

    $ cd ~/linux
    $ find . -iname vmlinux
    ./arch/x86/boot/compressed/vmlinux

# All registered file sytems

    $ cat /proc/filesystems

# Linux thread
In old Linux, using a pthread_create to create a new thread will actually
create two new processes, one for the new thread, one for a manager thread. The
manager thread is created the first time a program calls pthread_create to
create a new thread.

This is true until NPTL (Native Posix Threads Library) was introduced in kernel
2.6.

# Linux documentation
http://www.scribd.com/doc/24220666/52/Thread-API

# malloc
glibc's malloc uses the data segment to satisfy small allocations (128K, but
configurable) and anonymous memory mappings to satisfy large allocations
(mapped to /dev/zero).

# drop VFS cache
To free pagecache:

    echo 1 > /proc/sys/vm/drop_caches

To free dentries and inodes:

    echo 2 > /proc/sys/vm/drop_caches

To free pagecache, dentries and inodes:

    echo 3 > /proc/sys/vm/drop_caches

# stack
The kernel, instead, has a very small stack; it can be as small as a
single, 4096-byte page. Your functions must share that stack with the
entire kernel-space call chain. Thus, it is never a good idea to declare
large automatic variables; if you need larger structures, you should
allocate them dynamically at call time.

# Linux time

    # ls /usr/share/zoneinfo/
    # rm /etc/localtime
    # ln â€“s /usr/share/zoneinfo/EST /etc/localtime

    # yum install ntp
    # chkconfig ntpd on
    # ntpdate pool.ntp.org
    # /etc/init.d/ntpd start

